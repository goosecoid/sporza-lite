{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBA,mDAAuC;AACvC,+CAAoC;AACpC,uCAAmC;AAQnC,MAAM,WAAW,GAAG,GAAwB,EAAE;IAC1C,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,MAAM,EAAE;IACxC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE;IACpC,MAAM,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC;IAEtD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACjE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IAEtG,MAAM,QAAQ,GAA4B,EAAE;IAE5C,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;QAC9B,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;QACpD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,kDAAkD,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5G,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,gEAAgE,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1H,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,2DAA2D,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC;QACvH,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;QAEpI,MAAM,IAAI,GAAG,uBAAU,EAAC,QAAQ,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAE1B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC9B,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO;KAC1B;IAED,MAAM,IAAI,CAAC,KAAK,EAAE;IAClB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;IAEtB,sBAAa,EAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAClF,CAAC;AAED,WAAW,EAAE;KACR,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC","sources":["webpack://sporza-lite/external commonjs \"puppeteer\"","webpack://sporza-lite/external commonjs \"tslib\"","webpack://sporza-lite/external node-commonjs \"crypto\"","webpack://sporza-lite/external node-commonjs \"fs\"","webpack://sporza-lite/webpack/bootstrap","webpack://sporza-lite/./apps/sporza-scraper/src/main.ts"],"sourcesContent":["module.exports = require(\"puppeteer\");","module.exports = require(\"tslib\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as puppeteer from 'puppeteer';\nimport { createHash } from 'crypto';\nimport { writeFileSync } from 'fs';\n\ntype Article = {\n    title: string;\n    intro: string;\n    content: string;\n}\n\nconst getArticles = async (): Promise<void> => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n    await page.goto('https://sporza.be/nl/pas-verschenen')\n\n    const filteredHrefs = await page.$$eval('a', as => as.map(a => a.href)\n        .filter(href => href.includes('2022') && !href.includes('bekijk') && !href.includes('categorie')))\n\n    const articles: Record<string, Article> = {}\n\n    for (const href of filteredHrefs) {\n        await page.goto(href, { waitUntil: 'networkidle0' })\n        const title = await page.$eval('body > div > main > article > header > div.title', elem => elem.textContent)\n        const intro = await page.$eval('body > div > main > article > section > div.vrt-article__intro', elem => elem.textContent)\n        const content = await page.$eval('body > div > main > article > section > div.vrt-page__par', elem => elem.textContent)\n        const article = { title: title.trim(), intro, content: content.includes('Gerelateerd') ? content.split('Gerelateerd')[0] : content }\n\n        const hash = createHash('sha256');\n        hash.update(title.trim());\n\n        const key = hash.digest('hex')\n        articles[key] = article\n    }\n\n    await page.close()\n    await browser.close();\n\n    writeFileSync('articles.json', JSON.stringify(articles), { encoding: 'utf8' })\n}\n\ngetArticles()\n    .finally(() => console.log(\"\\nDone !\"))\n"],"names":[],"sourceRoot":""}